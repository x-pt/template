[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.project_version}}"
description = "{{cookiecutter.project_desc}}"
readme = "README.md"
requires-python = ">={{cookiecutter.python_version}}"
license = "MIT"
authors = [
    { name = "{{cookiecutter.full_name}}", email = "{{cookiecutter.email}}" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: {{cookiecutter.python_version}}",
]
dependencies = []

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "allure-pytest>=2.13.5",
    "ruff>=0.9.9",
    "mypy>=1.15.0",
    "pre-commit>=4.1.0",
]

[project.urls]
Documentation = "https://github.com/{{cookiecutter.__gh_slug}}#readme"
Issues = "https://github.com/{{cookiecutter.__gh_slug}}/issues"
Source = "https://github.com/{{cookiecutter.__gh_slug}}"

[tool.hatch.build.targets.wheel]
packages = ["src/{{cookiecutter.package_name}}"]

[tool.pytest.ini_options]
minversion = "8.1"
addopts = [
    "-ra",
    "-q",
    "--cov={{cookiecutter.project_slug}}",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=lcov",
    "--alluredir=allure-results",
]
consider_namespace_packages=true # Enable this to allow using the same filename in different test directories without needing __init__.py in each one
pythonpath = ["src", "."]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]

[tool.coverage.run]
source_pkgs = ["{{cookiecutter.package_name}}"]
branch = true
parallel = true
omit = [
    "*/.venv/*",
    "*/tests/*",
    "*/site-packages/*",
]

[tool.coverage.paths]
{{cookiecutter.package_name}} = ["src/{{cookiecutter.package_name}}", "*/{{cookiecutter.project_slug}}/src/{{cookiecutter.package_name}}"]
tests = ["tests", "*/{{cookiecutter.project_slug}}/tests"]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "if self.debug:",
    "if TYPE_CHECKING:",
    "no cov",
    "raise NotImplementedError",
    "pass",
    "pragma: no cover",
]
show_missing = true  # Show missing lines in the report
precision = 2  # Number of decimal places to use when rounding

[tool.mypy]
# Enable strict mode for comprehensive type checking
strict = true
python_version = "{{cookiecutter.python_version}}"

# Error reporting settings
pretty = true              # Beautify output for better readability
show_error_codes = true    # Display error codes for easier troubleshooting
show_error_context = true  # Show context for errors to aid debugging

# Ignore missing type hints for third-party libraries
ignore_missing_imports = true

# Exclude specific paths or files from type checking
exclude = [
    "tests/",
    "setup.py",
]

# Relax type-checking rules for test files (e.g., allow functions without type annotations)
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
