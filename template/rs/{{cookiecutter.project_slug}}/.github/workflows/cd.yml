name: CD # Continuous Deployment

on:
    push:
        tags:
            - '[v]?[0-9]+.[0-9]+.[0-9]+'

jobs:
{%- if cookiecutter.crate_type == "bin" %}
    publish:
        name: Publishing for {{ "${{ matrix.job.os }}" }}
        runs-on: {{ "${{ matrix.job.os }}" }}
        strategy:
            matrix:
                rust: [ stable ]
                job:
                    - { os: macos-latest, target: x86_64-apple-darwin, architecture: x86_64, binary-postfix: "", use-cross: false }
                    - { os: macos-latest, target: aarch64-apple-darwin, architecture: arm64, binary-postfix: "", use-cross: false }
                    - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, architecture: x86_64, binary-postfix: "", use-cross: false }
                    - { os: windows-latest, target: x86_64-pc-windows-msvc, architecture: x86_64, binary-postfix: ".exe", use-cross: false }
                    - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, architecture: arm64, binary-postfix: "", use-cross: true }
                    - { os: ubuntu-latest, target: i686-unknown-linux-gnu, architecture: i686, binary-postfix: "", use-cross: true }

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v5

            -   name: Install Rust toolchain
                uses: actions-rs/toolchain@v1
                with:
                    toolchain: {{ "${{ matrix.rust }}" }}
                    target: {{ "${{ matrix.job.target }}" }}
                    profile: minimal
                    override: true

            -   uses: Swatinem/rust-cache@v2

            -   name: Build Cargo package
                uses: actions-rs/cargo@v1
                with:
                    command: build
                    use-cross: {{ "${{ matrix.job.use-cross }}" }}
                    toolchain: {{ "${{ matrix.rust }}" }}
                    args: --release --target {{ "${{ matrix.job.target }}" }}

            -   name: Install strip command (if needed)
                if: startsWith(matrix.job.target, 'aarch64')
                run: sudo apt-get install -y binutils-aarch64-linux-gnu

            -   name: Package final binary
                run: |
                    cd target/{{ "${{ matrix.job.target }}" }}/release
                    BINARY_NAME={{cookiecutter.project_slug}}{{ "${{ matrix.job.binary-postfix }}" }}
                    GCC_PREFIX=$( [ "{{ "${{ matrix.job.target }}" }}" == "aarch64-unknown-linux-gnu" ] && echo "aarch64-linux-gnu-" || echo "" )
                    "$GCC_PREFIX"strip $BINARY_NAME

                    RELEASE_NAME={{cookiecutter.project_slug}}-${GITHUB_REF/refs\/tags\//}-{{ "${{ matrix.job.os-name }}" }}-{{ "${{ matrix.job.architecture }}" }}
                    tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
                    shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256

            -   name: Release assets
                uses: softprops/action-gh-release@v2
                with:
                    files: |
                        target/{{ "${{ matrix.job.target }}" }}/release/{{cookiecutter.project_slug}}-*.tar.gz
                        target/{{ "${{ matrix.job.target }}" }}/release/{{cookiecutter.project_slug}}-*.sha256
                env:
                    GITHUB_TOKEN: {{ "${{ secrets.GITHUB_TOKEN }}" }}
{%- endif %}
    publish-cargo:
        name: Publishing to Cargo
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v5

            -   name: Install Rust toolchain
                uses: dtolnay/rust-toolchain@stable

            -   uses: Swatinem/rust-cache@v2

            -   run: cargo publish
                env:
                    CARGO_REGISTRY_TOKEN: {{ "${{ secrets.CARGO_REGISTRY_TOKEN }}" }}
